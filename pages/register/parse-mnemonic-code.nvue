<template>
	<view class="common-body">
		<text class="mnemonic-text">
			请按顺序点击你的助记词，以便确认备份助记词的正确。
		</text>
		<view class="mnemonic-textarea">
			<textarea class="parse-textarea" placeholder="长按可以黏贴助记词" v-model="code" />
		</view>
		<!-- <view
			class="mnemonic-textarea"
		>
			<text v-if="!codeList.length">{{ code }}</text>
			<text v-if="codeList.length">{{ codeList.join(' ') }}</text>
		</view> -->
		<view v-for="(item, index) in colCount" :key="index" class="parse-col">
			<button
				v-for="n in 4"
				:key="n"
				class="parse-col-btn"
				@click="handleCode(mnemonicCodeList[index * 4 + n - 1])"
			>
				{{ mnemonicCodeList[index * 4 + n - 1] }}
			</button>
		</view>
		<button class="common-btn" @click="createAccount">下一步</button>
	</view>
</template>

<script>
	import mixins from '../../common/mixin';
    import {
        mapState,
        mapMutations
    } from 'vuex'
	import { encryptObj } from '../../common/encryptObj.js'
	export default {
		mixins: [mixins],
        computed: {
            ...mapState(['mnemonicCodeList', 'createObj']),
			colCount: function () {
				return Math.ceil(this.mnemonicCodeList.length / 4)
			}
        },
		data () {
			return {
				code: ''
			}
		},
		// onLoad:function(){
		// 	uni.navigateTo({
		// 		url: '/pages/home/index',
		// 		fail:function(err){
		// 			console.log(err)
		// 		}
		// 	})
		// },
		methods: {
			...mapMutations(['setLoginInfo']),
			handleCode (text) {
				if (this.code) {
					this.code = `${this.code} ${text}`
				} else {
					this.code = text
				}
			},
			createAccount: function(e) {
				let passwordInfo = encryptObj({
					Password: this.createObj.Password,
					ConfirmPassword: this.createObj.ConfirmPassword,
					AdvancedPassword: this.createObj.AdvancedPassword,
					ConfirmAdvancedPassword: this.createObj.ConfirmAdvancedPassword,
				}, this.createObj)
				this.request({
					url: 'accounts/market/register?cmd=saveRegV2',
					method: 'GET',
					data: {
						Add_PassportName: this.createObj.Add_PassportName,
						MnemonicCode: this.code.split(' '),
						MnemonicCodeRepeat: this.code.split(' '),
						...passwordInfo
					},
					success: (response) => {
						if (response.flag) {
							this.setLoginInfo(response.data)
							uni.showToast({
								icon: 'none',
								title:  response.message
							})
							setTimeout(() => {
								uni.switchTab({
									url: '/pages/home/index'
								})
							}, 1500)
						} else {
							uni.showToast({
								icon: 'none',
								title:  response.message
							})
						}
					},
					fail: (response) => {},
					complete: () => {}
				})
			}
		}
	}
</script>

<style scoped>
.parse-col {
	flex-direction: row;
	margin-top: 12px;
}
.parse-col + .parse-col {
	margin-top: 12px;
}
.parse-col button {
	background-color: #141b2f;
	color: #999;
	flex: 1;
}
.parse-col-btn + .parse-col-btn {
	margin-left: 12px;
}
.mnemonic-textarea text {
	color: #999999;
	text-align: center;
	width: 100%;
	padding: 20px;
}
.parse-textarea {
	width: 100%;
	color: #999999;
	text-align: center;
	padding: 20px;
}
</style>
